//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public CatchupComponent catchup { get { return (CatchupComponent)GetComponent(GameComponentsLookup.Catchup); } }
    public bool hasCatchup { get { return HasComponent(GameComponentsLookup.Catchup); } }

    public void AddCatchup(float newRange, float newFactor, float newMinimumMagnitude) {
        var index = GameComponentsLookup.Catchup;
        var component = CreateComponent<CatchupComponent>(index);
        component.Range = newRange;
        component.Factor = newFactor;
        component.MinimumMagnitude = newMinimumMagnitude;
        AddComponent(index, component);
    }

    public void ReplaceCatchup(float newRange, float newFactor, float newMinimumMagnitude) {
        var index = GameComponentsLookup.Catchup;
        var component = CreateComponent<CatchupComponent>(index);
        component.Range = newRange;
        component.Factor = newFactor;
        component.MinimumMagnitude = newMinimumMagnitude;
        ReplaceComponent(index, component);
    }

    public void RemoveCatchup() {
        RemoveComponent(GameComponentsLookup.Catchup);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherCatchup;

    public static Entitas.IMatcher<GameEntity> Catchup {
        get {
            if (_matcherCatchup == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.Catchup);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherCatchup = matcher;
            }

            return _matcherCatchup;
        }
    }
}
