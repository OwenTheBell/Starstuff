//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public MaxVelocityComponent maxVelocity { get { return (MaxVelocityComponent)GetComponent(GameComponentsLookup.MaxVelocity); } }
    public bool hasMaxVelocity { get { return HasComponent(GameComponentsLookup.MaxVelocity); } }

    public void AddMaxVelocity(float newMaxVelocity) {
        var index = GameComponentsLookup.MaxVelocity;
        var component = CreateComponent<MaxVelocityComponent>(index);
        component.MaxVelocity = newMaxVelocity;
        AddComponent(index, component);
    }

    public void ReplaceMaxVelocity(float newMaxVelocity) {
        var index = GameComponentsLookup.MaxVelocity;
        var component = CreateComponent<MaxVelocityComponent>(index);
        component.MaxVelocity = newMaxVelocity;
        ReplaceComponent(index, component);
    }

    public void RemoveMaxVelocity() {
        RemoveComponent(GameComponentsLookup.MaxVelocity);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherMaxVelocity;

    public static Entitas.IMatcher<GameEntity> MaxVelocity {
        get {
            if (_matcherMaxVelocity == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.MaxVelocity);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherMaxVelocity = matcher;
            }

            return _matcherMaxVelocity;
        }
    }
}
