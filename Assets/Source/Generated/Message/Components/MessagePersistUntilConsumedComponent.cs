//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class MessageEntity {

    static readonly PersistUntilConsumed persistUntilConsumedComponent = new PersistUntilConsumed();

    public bool isPersistUntilConsumed {
        get { return HasComponent(MessageComponentsLookup.PersistUntilConsumed); }
        set {
            if (value != isPersistUntilConsumed) {
                if (value) {
                    AddComponent(MessageComponentsLookup.PersistUntilConsumed, persistUntilConsumedComponent);
                } else {
                    RemoveComponent(MessageComponentsLookup.PersistUntilConsumed);
                }
            }
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class MessageMatcher {

    static Entitas.IMatcher<MessageEntity> _matcherPersistUntilConsumed;

    public static Entitas.IMatcher<MessageEntity> PersistUntilConsumed {
        get {
            if (_matcherPersistUntilConsumed == null) {
                var matcher = (Entitas.Matcher<MessageEntity>)Entitas.Matcher<MessageEntity>.AllOf(MessageComponentsLookup.PersistUntilConsumed);
                matcher.componentNames = MessageComponentsLookup.componentNames;
                _matcherPersistUntilConsumed = matcher;
            }

            return _matcherPersistUntilConsumed;
        }
    }
}
